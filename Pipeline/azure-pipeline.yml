# .NET Desktop
# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
- master

# The `resources` specify the location and version of the 1ES PT.
resources:
  repositories:
  - repository: 1esPipelines
    type: git
    name: 1ESPipelineTemplates/1ESPipelineTemplates
    ref: refs/tags/release

extends:
  # The pipeline extends the 1ES PT which will inject different SDL and compliance tasks.
  # For non-production pipelines, use "Unofficial" as defined below.
  # For productions pipelines, use "Official".
  template: v1/1ES.Official.PipelineTemplate.yml@1esPipelines
  parameters:
    # Update the pool with your team's 1ES hosted pool.
    pool:
      name: MSSecurity-1ES-Build-Agents-Pool  # Name of your hosted pool
      image:   # Name of the image in your pool. If not specified, first image of the pool is used
      os: windows  # OS of the image. This value cannot be a variable. Allowed values: windows, linux, macOS
    stages:
    - stage: Stage
      jobs:
      - job: ValidationTestsJob
        # If the pipeline publishes artifacts, use `templateContext` to define the artifacts.
        # This will enable 1ES PT to run SDL analysis tools on the artifacts and then upload them.
        templateContext:
          outputs:
          - output: pipelineArtifact
            targetPath: $(Build.ArtifactStagingDirectory)
            artifactName: DiagManagerPipelineArtifacts
        # Define the steps that the pipeline will run.
        # In most cases, copy and paste the steps from the original pipeline.
        steps:
        - script: echo Start Pipeline!
          displayName: 'Run a one-line script'

            
        - task: ManifestGeneratorTask@0
          inputs:
            BuildDropPath: '$(Build.ArtifactStagingDirectory)'
